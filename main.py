import tkinter as tk
from tkinter import ttk
import sqlite3
from tkinter import filedialog
root = tk.Tk()
root.title("Company Database")
conn = sqlite3.connect('company_db.sqlite')
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS contact_info (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        phone TEXT,
        email TEXT
    )
''')
conn.commit()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS companies (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        contact_id INTEGER,  -- Reference to contact_info.id
        attachments TEXT,
        notes TEXT,
        FOREIGN KEY (contact_id) REFERENCES contact_info(id)
    ) 
''')
conn.commit()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS tickets (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        issue TEXT,
        contact_id INTEGER,  -- Reference to contact_info.id
        attachments TEXT,
        notes TEXT,
        FOREIGN KEY (contact_id) REFERENCES contact_info(id)
    )
''')
conn.commit()
def refresh_data(table_name, tree):
    tree.delete(*tree.get_children())
    cursor.execute(f"SELECT * FROM {table_name}")
    rows = cursor.fetchall()
    for row in rows:
        if table_name == "companies":
            tree.insert('', 'end', values=(row[1], row[2], row[3], row[4]))
        elif table_name == "tickets":
            tree.insert('', 'end', values=(row[1], row[4], row[5], row[6]))
def add_contact(name, phone, email):
    cursor.execute("INSERT INTO contact_info (name, phone, email) VALUES (?, ?, ?)",
                   (name, phone, email))
    conn.commit()
    return cursor.lastrowid
def add_company():
    def save_company():
        name = name_entry.get()
        contact_name = contact_name_entry.get()
        contact_phone = contact_phone_entry.get()
        contact_email = contact_email_entry.get()
        attachments = attachments_label.cget("text")
        notes = notes_text.get("1.0", "end-1c")
        contact_id = add_contact(contact_name, contact_phone, contact_email)
        cursor.execute("INSERT INTO companies (name, contact_id, attachments, notes) VALUES (?, ?, ?, ?)",
                       (name, contact_id, attachments, notes))
        conn.commit()
        refresh_data("companies", company_tree)
        popup.destroy()
    popup = tk.Toplevel(root)
    popup.title("Add Company")
    name_label = tk.Label(popup, text="Company Name:")
    name_label.pack()
    name_entry = tk.Entry(popup)
    name_entry.pack()
    contact_name_label = tk.Label(popup, text="Contact Name:")
    contact_name_label.pack()
    contact_name_entry = tk.Entry(popup)
    contact_name_entry.pack()
    contact_phone_label = tk.Label(popup, text="Contact Phone:")
    contact_phone_label.pack()
    contact_phone_entry = tk.Entry(popup)
    contact_phone_entry.pack()
    contact_email_label = tk.Label(popup, text="Contact Email:")
    contact_email_label.pack()
    contact_email_entry = tk.Entry(popup)
    contact_email_entry.pack()
    attachments_label = tk.Label(popup, text="No file selected")
    attachments_label.pack()
    def attach_file():
        file_path = filedialog.askopenfilename()
        attachments_label.config(text=file_path)
    attach_button = tk.Button(popup, text="Attach File", command=attach_file)
    attach_button.pack()
    notes_label = tk.Label(popup, text="Notes:")
    notes_label.pack()
    notes_text = tk.Text(popup, height=5, width=30)
    notes_text.pack()
    save_button = tk.Button(popup, text="Save", command=save_company)
    save_button.pack()
def delete_company():
    selected_item = company_tree.selection()
    if selected_item:
        id_to_delete = company_tree.item(selected_item, 'values')[0]
        cursor.execute("DELETE FROM companies WHERE id=?", (id_to_delete,))
        conn.commit()
        refresh_data("companies", company_tree)
def add_ticket():
    def save_ticket():
        issue = issue_entry.get()
        contact_name = contact_name_entry.get()
        contact_phone = contact_phone_entry.get()
        contact_email = contact_email_entry.get()
        attachments = attachments_label.cget("text")
        notes = notes_text.get("1.0", "end-1c")
        contact_id = add_contact(contact_name, contact_phone, contact_email)
        cursor.execute("INSERT INTO tickets (issue, contact_id, attachments, notes) VALUES (?, ?, ?, ?)",
                       (issue, contact_id, attachments, notes))
        conn.commit()
        refresh_data("tickets", ticket_tree)
        popup.destroy()
    popup = tk.Toplevel(root)
    popup.title("Add Ticket")
    issue_label = tk.Label(popup, text="Issue:")
    issue_label.pack()
    issue_entry = tk.Entry(popup)
    issue_entry.pack()
    contact_name_label = tk.Label(popup, text="Contact Name:")
    contact_name_label.pack()
    contact_name_entry = tk.Entry(popup)
    contact_name_entry.pack()
    contact_phone_label = tk.Label(popup, text="Contact Phone:")
    contact_phone_label.pack()
    contact_phone_entry = tk.Entry(popup)
    contact_phone_entry.pack()
    contact_email_label = tk.Label(popup, text="Contact Email:")
    contact_email_label.pack()
    contact_email_entry = tk.Entry(popup)
    contact_email_entry.pack()
    attachments_label = tk.Label(popup, text="No file selected")
    attachments_label.pack()
    def attach_file():
        file_path = filedialog.askopenfilename()
        attachments_label.config(text=file_path)
    attach_button = tk.Button(popup, text="Attach File", command=attach_file)
    attach_button.pack()
    notes_label = tk.Label(popup, text="Notes:")
    notes_label.pack()
    notes_text = tk.Text(popup, height=5, width=30)
    notes_text.pack()
    save_button = tk.Button(popup, text="Save", command=save_ticket)
    save_button.pack()
search_query = tk.StringVar()
def filter_data():
    query = search_query.get()
    cursor.execute(f"SELECT * FROM companies WHERE name LIKE ? ORDER BY name", ('%' + query + '%',))
    rows = cursor.fetchall()
    refresh_data("companies", company_tree, rows)
def refresh_data(table_name, tree, data=None):
    tree.delete(*tree.get_children())
    if data is None:
        cursor.execute(f"SELECT * FROM {table_name}")
        data = cursor.fetchall()
    for row in data:
        tree.insert('', 'end', values=row)
def delete_ticket():
    selected_item = ticket_tree.selection()
    if selected_item:
        id_to_delete = ticket_tree.item(selected_item, 'values')[0]
        cursor.execute("DELETE FROM tickets WHERE id=?", (id_to_delete,))
        conn.commit()
        refresh_data("tickets", ticket_tree)
def edit_company():
    selected_item = company_tree.selection()
    if selected_item:
        id_to_edit = company_tree.item(selected_item, 'values')[0]
        edit_popup = tk.Toplevel(root)
        edit_popup.title("Edit Company")
        cursor.execute("SELECT * FROM companies WHERE id=?", (id_to_edit,))
        company_data = cursor.fetchone()
        def save_edit():
            name = name_entry.get()
            contact_name = contact_name_entry.get()
            contact_phone = contact_phone_entry.get()
            contact_email = contact_email_entry.get()
            attachments = attachments_label.cget("text")
            notes = notes_text.get("1.0", "end-1c")
            cursor.execute("UPDATE contact_info SET name=?, phone=?, email=? WHERE id=?",
                           (contact_name, contact_phone, contact_email, company_data[2]))
            conn.commit()
            cursor.execute("UPDATE companies SET name=?, attachments=?, notes=? WHERE id=?",
                           (name, attachments, notes, id_to_edit))
            conn.commit()
            refresh_data("companies", company_tree)
            edit_popup.destroy()
        name_label = tk.Label(edit_popup, text="Company Name:")
        name_label.pack()
        name_entry = tk.Entry(edit_popup)
        name_entry.insert(0, company_data[1])
        name_entry.pack()
        contact_name_label = tk.Label(edit_popup, text="Contact Name:")
        contact_name_label.pack()
        contact_name_entry = tk.Entry(edit_popup)
        cursor.execute("SELECT name FROM contact_info WHERE id=?", (company_data[2],))
        contact_name_entry.insert(0, cursor.fetchone()[0])
        contact_name_entry.pack()
        contact_phone_label = tk.Label(edit_popup, text="Contact Phone:")
        contact_phone_label.pack()
        contact_phone_entry = tk.Entry(edit_popup)
        cursor.execute("SELECT phone FROM contact_info WHERE id=?", (company_data[2],))
        contact_phone_entry.insert(0, cursor.fetchone()[0])
        contact_phone_entry.pack()
        contact_email_label = tk.Label(edit_popup, text="Contact Email:")
        contact_email_label.pack()
        contact_email_entry = tk.Entry(edit_popup)
        cursor.execute("SELECT email FROM contact_info WHERE id=?", (company_data[2],))
        contact_email_entry.insert(0, cursor.fetchone()[0])
        contact_email_entry.pack()
        attachments_label = tk.Label(edit_popup, text="No file selected")
        attachments_label.pack()
        def attach_file():
            file_path = filedialog.askopenfilename()
            attachments_label.config(text=file_path)
        attach_button = tk.Button(edit_popup, text="Attach File", command=attach_file)
        attach_button.pack()
        notes_label = tk.Label(edit_popup, text="Notes:")
        notes_label.pack()
        notes_text = tk.Text(edit_popup, height=5, width=30)
        notes_text.insert(tk.END, company_data[4])
        notes_text.pack()
        save_button = tk.Button(edit_popup, text="Save", command=save_edit)
        save_button.pack()
def edit_ticket():
    selected_item = ticket_tree.selection()
    if selected_item:
        id_to_edit = ticket_tree.item(selected_item, 'values')[0]
        edit_popup = tk.Toplevel(root)
        edit_popup.title("Edit Ticket")
        cursor.execute("SELECT * FROM tickets WHERE id=?", (id_to_edit,))
        ticket_data = cursor.fetchone()
        def save_edit():
            issue = issue_entry.get()
            contact_name = contact_name_entry.get()
            contact_phone = contact_phone_entry.get()
            contact_email = contact_email_entry.get()
            attachments = attachments_label.cget("text")
            notes = notes_text.get("1.0", "end-1c")
            cursor.execute("UPDATE contact_info SET name=?, phone=?, email=? WHERE id=?",
                           (contact_name, contact_phone, contact_email, ticket_data[2]))
            conn.commit()
            cursor.execute("UPDATE tickets SET issue=?, attachments=?, notes=? WHERE id=?",
                           (issue, attachments, notes, id_to_edit))
            conn.commit()
            refresh_data("tickets", ticket_tree)
            edit_popup.destroy()
        issue_label = tk.Label(edit_popup, text="Issue:")
        issue_label.pack()
        issue_entry = tk.Entry(edit_popup)
        issue_entry.insert(0, ticket_data[1])
        issue_entry.pack()
        contact_name_label = tk.Label(edit_popup, text="Contact Name:")
        contact_name_label.pack()
        contact_name_entry = tk.Entry(edit_popup)
        cursor.execute("SELECT name FROM contact_info WHERE id=?", (ticket_data[2],))
        contact_name_entry.insert(0, cursor.fetchone()[0])
        contact_name_entry.pack()
        contact_phone_label = tk.Label(edit_popup, text="Contact Phone:")
        contact_phone_label.pack()
        contact_phone_entry = tk.Entry(edit_popup)
        cursor.execute("SELECT phone FROM contact_info WHERE id=?", (ticket_data[2],))
        contact_phone_entry.insert(0, cursor.fetchone()[0])
        contact_phone_entry.pack()
        contact_email_label = tk.Label(edit_popup, text="Contact Email:")
        contact_email_label.pack()
        contact_email_entry = tk.Entry(edit_popup)
        cursor.execute("SELECT email FROM contact_info WHERE id=?", (ticket_data[2],))
        contact_email_entry.insert(0, cursor.fetchone()[0])
        contact_email_entry.pack()
        attachments_label = tk.Label(edit_popup, text="No file selected")
        attachments_label.pack()
        def attach_file():
            file_path = filedialog.askopenfilename()
            attachments_label.config(text=file_path)
        attach_button = tk.Button(edit_popup, text="Attach File", command=attach_file)
        attach_button.pack()
        notes_label = tk.Label(edit_popup, text="Notes:")
        notes_label.pack()
        notes_text = tk.Text(edit_popup, height=5, width=30)
        notes_text.insert(tk.END, ticket_data[4])
        notes_text.pack()
        save_button = tk.Button(edit_popup, text="Save", command=save_edit)
        save_button.pack()
notebook = ttk.Notebook(root)
notebook.pack(fill='both', expand=True)
companies_tab = ttk.Frame(notebook)
notebook.add(companies_tab, text="Companies")
company_tree = ttk.Treeview(companies_tab, columns=("Name", "Contact", "Attachments", "Notes"))
company_tree.heading("#1", text="Name")
company_tree.heading("#2", text="Contact")
company_tree.heading("#3", text="Attachments")
company_tree.heading("#4", text="Notes")
company_tree.pack()
search_entry = tk.Entry(companies_tab, textvariable=search_query)
search_entry.pack()
search_entry.bind("<KeyRelease>", lambda event: filter_data())
add_company_button = tk.Button(companies_tab, text="Add Company", command=add_company)
add_company_button.pack()
edit_company_button = tk.Button(companies_tab, text="Edit Company", command=edit_company)
edit_company_button.pack()
delete_company_button = tk.Button(companies_tab, text="Delete Company", command=delete_company)
delete_company_button.pack()
tickets_tab = ttk.Frame(notebook)
notebook.add(tickets_tab, text="Tickets")
ticket_tree = ttk.Treeview(tickets_tab, columns=("Issue", "Contact", "Attachments", "Notes"))
ticket_tree.heading("#1", text="Issue")
ticket_tree.heading("#2", text="Contact")
ticket_tree.heading("#3", text="Attachments")
ticket_tree.heading("#4", text="Notes")
ticket_tree.pack()
add_ticket_button = tk.Button(tickets_tab, text="Add Ticket", command=add_ticket)
add_ticket_button.pack()
edit_ticket_button = tk.Button(tickets_tab, text="Edit Ticket", command=edit_ticket)
edit_ticket_button.pack()
delete_ticket_button = tk.Button(tickets_tab, text="Delete Ticket", command=delete_ticket)
delete_ticket_button.pack()
refresh_data("companies", company_tree)
refresh_data("tickets", ticket_tree)
root.mainloop()
conn.close()